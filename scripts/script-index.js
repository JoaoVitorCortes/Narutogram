// A URL base da API
const API_URL = "https://dattebayo-api.onrender.com/characters";

// Arrays de imagens e legendas (mantidos como antes)
const randomImages = [
  "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400",
];
const randomCaptions = [
  "Treinando para ser o pr칩ximo Hokage! 游댠",
  "Mais um dia na vila da folha 游꼒",
  "Nunca desista dos seus sonhos!",
  "O poder da juventude! 游눩",
  "Protegendo aqueles que amo 仇벒잺",
  "Caminho ninja nunca acaba!",
  "For칞a vem da determina칞칚o!",
  "Unidos somos mais fortes!",
  "A vontade do fogo queima em mim!",
  "Cada dia 칠 uma nova miss칚o!",
];

// ==================================================================
// NOVA FUN칂츾O QUE BUSCA TODAS AS P츼GINAS DA API
// ==================================================================
async function fetchAllCharacters() {
  console.log(
    "Iniciando busca de todos os personagens. Isso pode levar alguns segundos..."
  );

  try {
    // 1. Faz a primeira requisi칞칚o para descobrir o total de p치ginas
    const firstPageResponse = await fetch(API_URL);
    const firstPageData = await firstPageResponse.json();

    const totalCharacters = firstPageData.total;
    const pageSize = firstPageData.pageSize;
    const totalPages = Math.ceil(totalCharacters / pageSize);

    console.log(`Total de p치ginas a serem buscadas: ${totalPages}`);

    // 2. Cria um array de promessas, uma para cada p치gina, come칞ando da p치gina 2
    // (J치 temos os dados da p치gina 1)
    const pagePromises = [];
    for (let i = 2; i <= totalPages; i++) {
      pagePromises.push(
        fetch(`${API_URL}?page=${i}`).then((res) => res.json())
      );
    }

    // 3. Executa todas as promessas de busca em paralelo para ser mais r치pido
    const allPagesResults = await Promise.all(pagePromises);

    // 4. Junta o resultado da primeira p치gina com os resultados das outras p치ginas
    let allCharacters = [...firstPageData.characters];
    allPagesResults.forEach((pageData) => {
      allCharacters = allCharacters.concat(pageData.characters);
    });

    console.log(
      `Busca finalizada! Total de ${allCharacters.length} personagens carregados.`
    );
    return allCharacters;
  } catch (error) {
    console.error("Erro ao buscar todos os personagens:", error);
    return [];
  }
}

// A fun칞칚o createPost e addClickListeners permanecem exatamente iguais.
function createPost(character) {
  const post = document.createElement("div");
  post.className = "post";

  const postImage =
    randomImages[Math.floor(Math.random() * randomImages.length)] ||
    "https://via.placeholder.com/400";
  const postCaption =
    randomCaptions[Math.floor(Math.random() * randomCaptions.length)] ||
    "Um dia na vida de um ninja...";

  post.innerHTML = `
        <div class="post-header">
            <img src="${
              character.images[0] || "https://via.placeholder.com/40"
            }" alt="${character.name}" class="profile-pic">
            <div class="user-info">
                <h3 class="username" data-character="${encodeURIComponent(
                  character.name
                )}">${character.name}</h3>
                <span class="location">${
                  character.personal?.affiliation?.[0] || "Vila Oculta"
                }</span>
            </div>
        </div>
        <div class="post-image-container">
            <img src="${postImage}" alt="Post de ${
    character.name
  }" class="post-image" data-character="${encodeURIComponent(character.name)}">
        </div>
        <div class="post-actions">
            <button><i class="bi bi-hearts"></i></button>
            <button><i class="bi bi-chat-heart-fill"></i></button>
            <button><i class="bi bi-send-fill"></i></button>
        </div>
        <div class="post-caption">
            <strong>${character.name}</strong> ${postCaption}
        </div>
    `;

  return post;
}

function addClickListeners() {
  document.querySelectorAll(".username, .post-image").forEach((element) => {
    element.addEventListener("click", (e) => {
      const characterName = e.currentTarget.getAttribute("data-character");
      window.location.href = `personagem.html?nome=${characterName}`;
    });
  });
}

async function loadFeed() {
  const feedContainer = document.getElementById("feed-container");
  feedContainer.innerHTML =
    "<p>Carregando feed de todos os ninjas... Por favor, aguarde.</p>";

  // Lista de personagens que voc칡 quer que apare칞am
  const personagensPermitidos = [
    "Nagato",
    "Konan",
    "Itachi Uchiha",
    "Kisame Hoshigaki",
    "Deidara",
    "Sasori",
    "Hidan",
    "Kakuzu",
    "Zetsu",
    "Obito Uchiha",
    "Madara Uchiha",
    "Minato Namikaze",
    "Naruto Uzumaki",
    "Sasuke Uchiha",
    "Sakura Haruno",
    "Kakashi Hatake",
    "Kiba Inuzuka",
    "Shino Aburame",
    "Hinata Hy콞ga",
    "Kurenai Y콞hi",
    "Rock Lee",
    "Neji Hy콞ga",
    "Tenten",
    "Might Guy",
    "Shikamaru Nara",
    "Ch콄ji Akimichi",
    "Ino Yamanaka",
    "Asuma Sarutobi",
  ];

  // **ALTERA칂츾O AQUI: Chama a nova fun칞칚o que busca TUDO**
  const allCharacters = await fetchAllCharacters();

  if (allCharacters.length === 0) {
    feedContainer.innerHTML =
      "<p>Erro ao carregar o feed. Tente novamente mais tarde.</p>";
    return;
  }

  // Filtra a lista COMPLETA, mantendo apenas os da sua lista de permitidos
  const personagensFiltrados = allCharacters.filter((character) =>
    personagensPermitidos.includes(character.name)
  );

  // Limpa a mensagem de "Carregando..."
  feedContainer.innerHTML = "";

  // Embaralha a sua lista j치 filtrada
  const shuffledCharacters = personagensFiltrados.sort(
    () => 0.5 - Math.random()
  );

  shuffledCharacters.forEach((character) => {
    if (character.images && character.images.length > 0) {
      const post = createPost(character);
      feedContainer.appendChild(post);
    }
  });

  addClickListeners();
}

// Carregar o feed quando a p치gina estiver pronta
document.addEventListener("DOMContentLoaded", loadFeed);
